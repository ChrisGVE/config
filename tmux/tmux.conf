unbind C-b
set -g prefix C-s

# Reload configuration
bind-key r source-file ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded"

# Navigation bindings
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#     
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
#
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
#
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
#
# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l

# Using the Neovim plugin smart-splits.nvim
# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Smart pane switching with awareness of Neovim splits.
# bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
# bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
# bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
# bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
bind-key -n C-h if -F '#{@pane-is-vim}' { send-keys C-h } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
bind-key -n C-j if -F '#{@pane-is-vim}' { send-keys C-j } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n C-k if -F '#{@pane-is-vim}' { send-keys C-k } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
bind-key -n C-l if -F '#{@pane-is-vim}' { send-keys C-l } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n M-Left  if -F "#{@pane-is-vim}" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-Down  if -F "#{@pane-is-vim}" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-Up    if -F "#{@pane-is-vim}" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-Right if -F "#{@pane-is-vim}" 'send-keys M-l' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

#
# Modification after neovim 0.8 :checkhealth
set-option -sg escape-time 10
set-option -g focus-events on
set-option -g default-terminal "tmux-256color"
# set-option -ag terminal-overrides ",xterm-256color:RGB"
#
#
# set-option -g status-bg '#666666'
# set-option -g status-fg '#aaaaaa'
# set-option -g status-left-length 50
# set-option -g status-right " #(date '+%a, %b %d - %I:%M') "
set-option -g base-index 1
set-option -g renumber-windows on
# Getting true color
set-option -sa terminal-overrides ",screen-256color:RGB"

# Rebinding with current path
bind-key '-' split-window -v -c '#{pane_current_path}'
bind-key '\' split-window -h -c '#{pane_current_path}'
bind-key 'c' new-window -c '#{pane_current_path}'

# Fine adjustment (1 or 2 cursor cells per bump)
bind-key -n S-Left resize-pane -L 2
bind-key -n S-Right resize-pane -R 2
bind-key -n S-Down resize-pane -D 1
bind-key -n S-Up resize-pane -U 1

# Coarse adjustment (5 or 10 cursor cells per bump)
bind-key -n M-Left resize-pane -L 10
bind-key -n M-Right resize-pane -R 10
bind-key -n M-Down resize-pane -D 5
bind-key -n M-Up resize-pane -U 5

# Maximize current window (toggle)
bind-key -r m resize-pane -Z

# Enable mouse
set -g mouse on

# Break pane on its own window
bind-key b break-pane -d

# manage sessions
bind-key C-j choose-tree

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Set default shell as zsh
# set -g default-shell /bin/zsh

# Undercurl
# set -g default-terminal "${TERM}"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi r send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect' # Persist tmux sessions after computer restart
set -g @plugin 'tmux-plugins/tmux-continuum' # automatically saves sessions every 15 minutes

## Setup the theme

# set -g @plugin 'jimeh/tmux-themepack'
# set -g @themepack 'powerline/double/cyan'

set -g @plugin 'catppuccin/tmux#2.1.0'
set -g @catppuccin_flavour 'mocha'
set -g @catppuccin_window_status_style 'slanted'
run ~/.config/tmux/plugins/tmux/catppuccin.tmux

set -g @catppuccin_window_flags 'icon'
set -g @catppuccin_window_text ' #{window_name}'
set -g @catppuccin_window_current_text ' #{window_name}'
set -g status-justify 'centre'
set -g status-right-length 100
set -g status-left-length 100
set -g status-interval 1
set -g clock-mode-style 24

# left status
set -goq @Left-left  '#S'
set -goq @Left-mid   '#(whoami)'
set -goq @Left-right '#I:#P'
set -gqF  @Left-sts '#[fg=#{@thm_bg},bg=#{@thm_blue},bold] #{@Left-left} '               # a
set -agqF @Left-sts '#[fg=#{@thm_blue},bg=#{@thm_surface_0},nobold]'                    # a-b join character
set -agqF @Left-sts '#[fg=#{@thm_blue},bg=#{@thm_surface_0}] #{@Left-mid} '          # b
set -agqF @Left-sts '#[fg=#{@thm_surface_0},bg=#{@thm_bg},nobold]'               # b-c join character
set -agqF @Left-sts '#[fg=#{@thm_blue},bg=#{@thm_mantle},nobold] #{@Left-right} ' # c
set -agqF @Left-sts '#[fg=#{@thm_fg},bg=#{@thm_mantle},nobold]'                      # c end character
set -gF status-left '#{@Left-sts}'

# right status
set -goq @Right-left  '%H:%M:%S'
set -goq @Right-mid   '%d-%b-%y'
set -goq @Right-right '#H'
set -gqF  @Right-sts '#[fg=#{@thm_fg},bg=#{@thm_mantle},nobold]'                     # x end character
set -agqF @Right-sts '#[fg=#{@thm_mauve},bg=#{@thm_mantle},nobold] #{@Right-left} '   # x
set -agqF @Right-sts '#[fg=#{@thm_surface_0},bg=#{@thm_mantle},nobold]'              # x-y join character
set -agqF @Right-sts '#[fg=#{@thm_mauve},bg=#{@thm_surface_0},nobold] #{@Right-mid} '    # y
set -agqF @Right-sts '#[fg=#{@thm_mauve},bg=#{@thm_surface_0},nobold]'                   # y-z join character
set -agqF @Right-sts '#[fg=#{@thm_bg},bg=#{@thm_mauve},bold] #{@Right-right} '            # z 
set -gF status-right '#{@Right-sts}'

# Powerline glyphs
# 
# 
# 
# 
# █

# Set the continuum mode and restore
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'

# Fix the wrong shell selection
set -g default-command "reattach-to-user-namespace -l $SHELL"

run '~/.config/tmux/plugins/tpm/tpm'

