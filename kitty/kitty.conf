include ./kitty-themes/catppuccin/themes/mocha.conf

# vim:fileencoding=utf-8:foldmethod=marker

paste_actions quote-urls-at-prompt


# Fonts settings

font_family       Operator Mono SSm Lig Book
bold_font         Operator Mono Bold
italic_font       Operator Mono SSm Lig Book Italic
bold_italic_font  Operator Mono Bold Italic

font_size 15.0

disable_ligatures cursor

# Copy/paste behavior
strip_trailing_spaces never


select_by_word_characters "@-./_~?&=%+#"

show_hyperlink_targets yes

# Misc terminal management
enable_audio_bell yes
remember_window_size  yes
enabled_layouts splits, stack
window_resize_step_cells 2
window_resize_step_lines 2
window_border_width 0.5pt
visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ
window_padding_width 1
confirm_os_window_close -1
tab_bar_style slant
tab_bar_min_tabs 2
tab_activity_symbol " "
active_tab_background #89B4FA
# tab_title_template "{' ' if layout_name == 'stack' else ''}{fmt.fg.color1}{bell_symbol}{fmt.fg.color2}{activity_symbol}{fmt.fg.tab}{fmt.italic}{fmt.nobold}{index} {title[title.rfind(':')+1:]} "
# active_tab_title_template "{' ' if layout_name == 'stack' else ''}{fmt.fg.color1}{bell_symbol}{fmt.fg.color2}{activity_symbol}{fmt.fg.tab}{fmt.noitalic}{fmt.bold}{index} {tab.active_wd.replace("/Users/chris","~")}{'|'+title if title.rfind('@') == -1 else ''} "
tab_title_template "{' ' if layout_name == 'stack' else ''}{fmt.fg.color1}{bell_symbol}{fmt.fg.color2}{activity_symbol}{fmt.fg.tab}{fmt.italic}{fmt.nobold}{index} {title} "
active_tab_title_template "{' ' if layout_name == 'stack' else ''}{fmt.fg.color1}{bell_symbol}{fmt.fg.color2}{activity_symbol}{fmt.fg.tab}{fmt.noitalic}{fmt.bold}{index} {title} "
editor /usr/local/bin/nvim
close_on_child_death yes
allow_remote_control yes

clear_all_shortcuts yes

# Session management

scrollback_lines 8000

allow_hyperlinks yes

shell_integration enabled

macos_quit_when_last_window_closed yes

# Mouse settings
mouse_map left click ungrabbed no-op
mouse_map ctrl+left click ungrabbed mouse_handle_click selection link prompt
mouse_map ctrl+left press ungrabbed mouse_selection normal
mouse_map right press ungrabbed copy_to_clipboard

# Key mappings

startup_session /Users/chris/.local/state/kitty/autosave-session.conf
startup_session /Users/chris/.config/kitty/startup.conf
map ctrl+s>s launch --type=background --allow-remote-control ~/.config/kitty/dump-session.sh

map cmd+n new_os_window
map cmd+w close_tab
map cmd+t new_tab
map ctrl+s>c launch --cwd=root --type=tab

# Change focus to tab...
map ctrl+s>1 goto_tab 1 
map ctrl+s>2 goto_tab 2 
map ctrl+s>3 goto_tab 3 
map ctrl+s>4 goto_tab 4 
map ctrl+s>5 goto_tab 5 
map ctrl+s>6 goto_tab 6 
map ctrl+s>7 goto_tab 7 
map ctrl+s>8 goto_tab 8 
map ctrl+s>9 goto_tab 9 
map ctrl+s>0 goto_tab 10

# alternate to focus to tab...
map cmd+1 goto_tab 1 
map cmd+2 goto_tab 2 
map cmd+3 goto_tab 3 
map cmd+4 goto_tab 4 
map cmd+5 goto_tab 5 
map cmd+6 goto_tab 6 
map cmd+7 goto_tab 7 
map cmd+8 goto_tab 8 
map cmd+9 goto_tab 9 
map cmd+0 goto_tab 10

# Move tab
map ctrl+s>.  move_tab_forward
map ctrl+s>,  move_tab_backward

# Move a window to a new tab
map ctrl+s>w  detach_window new-tab-left
# move a window to a new OS Window
map ctrl+s>D  detach_window
# Move tab into a new OS Window
map ctrl+s>W  detach_tab

map ctrl+s>shift+e launch --type=os-window nvim ~/.config/kitty/kitty.conf
map ctrl+s>shift+d debug_config
map ctrl+s>shift+r combine : load_config_file : bell

map ctrl+s>q     close_window

map ctrl+s>escape  no-op
map ctrl+s>shift+s kitty_shell window

# Copy to clipboard
map cmd+c copy_to_clipboard
# Paste from clipboard
map cmd+v paste_from_clipboard

# Toggle full screen mode
map <ctrl+s>shift+f  toggle_fullscreen

# Toggle zoom mode
map ctrl+s>z combine : toggle_layout stack : scroll_prompt_to_bottom

# Create a new window splitting the space used by the existing one so that
# the two windows are placed one above the other
map ctrl+s>- launch --location=hsplit --cwd=current
# Create a new window splitting the space used by the existing one so that
# the two windows are placed side by side
map ctrl+s>\ launch --location=vsplit --cwd=current
#
map ctrl+s>n new_window_with_cwd

# moving windows
map ctrl+s>ctrl+j move_window bottom
map ctrl+s>ctrl+k move_window top
map ctrl+s>ctrl+h move_window left
map ctrl+s>ctrl+l move_window right
# Rotate the current split, changing its split axis from vertical to
# horizontal or vice versa
map ctrl+s>r layout_action rotate

# Move the active window to the indicated screen edge
map ctrl+s>shift+j layout_action move_to_screen_edge top
map ctrl+s>shift+k layout_action move_to_screen_edge left
map ctrl+s>shift+h layout_action move_to_screen_edge right
map ctrl+s>shift+l layout_action move_to_screen_edge bottom

#: This is to use with Neovim and smart-splits
map ctrl+j neighboring_window down
map ctrl+k neighboring_window up
map ctrl+h neighboring_window left
map ctrl+l neighboring_window right

# Unset the mapping to pass the keys to neovim
map --when-focus-on var:IS_NVIM ctrl+j
map --when-focus-on var:IS_NVIM ctrl+k
map --when-focus-on var:IS_NVIM ctrl+h
map --when-focus-on var:IS_NVIM ctrl+l

# the 3 here is the resize amount, adjust as needed
map Ctrl+Down  kitten relative_resize.py down  3
map Ctrl+Up    kitten relative_resize.py up    3
map Ctrl+Left  kitten relative_resize.py left  3
map Ctrl+Right kitten relative_resize.py right 3

map --when-focus-on var:IS_NVIM Ctrl+Down
map --when-focus-on var:IS_NVIM Ctrl+Up
map --when-focus-on var:IS_NVIM Ctrl+Left
map --when-focus-on var:IS_NVIM Ctrl+Right

map ctrl+s>h kitten keymap.py

# Mapping restored from the default.
map cmd+q quit
map cmd+h hide_macos_app
map cmd+opt+h hide_macos_other_apps
map cmd+m minimize_macos_window
map ctrl+cmd+f toggle_fullscreen

#: Kitty to listen for remote commands on a socket:
allow_remote_control yes
listen_on unix:/tmp/mykitty

map ctrl+shift+f1  show_kitty_doc overview

